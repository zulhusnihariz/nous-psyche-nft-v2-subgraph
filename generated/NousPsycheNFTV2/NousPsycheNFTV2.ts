// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Equipped extends ethereum.Event {
  get params(): Equipped__Params {
    return new Equipped__Params(this);
  }
}

export class Equipped__Params {
  _event: Equipped;

  constructor(event: Equipped) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get perkId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get cid(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PerkAdded extends ethereum.Event {
  get params(): PerkAdded__Params {
    return new PerkAdded__Params(this);
  }
}

export class PerkAdded__Params {
  _event: PerkAdded;

  constructor(event: PerkAdded) {
    this._event = event;
  }

  get perkId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PerkSaleToggled extends ethereum.Event {
  get params(): PerkSaleToggled__Params {
    return new PerkSaleToggled__Params(this);
  }
}

export class PerkSaleToggled__Params {
  _event: PerkSaleToggled;

  constructor(event: PerkSaleToggled) {
    this._event = event;
  }

  get perkId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get isForSale(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get isLocked(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class PerkUpdated extends ethereum.Event {
  get params(): PerkUpdated__Params {
    return new PerkUpdated__Params(this);
  }
}

export class PerkUpdated__Params {
  _event: PerkUpdated;

  constructor(event: PerkUpdated) {
    this._event = event;
  }

  get perkId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Purchased extends ethereum.Event {
  get params(): Purchased__Params {
    return new Purchased__Params(this);
  }
}

export class Purchased__Params {
  _event: Purchased;

  constructor(event: Purchased) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get perkId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cid(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NousPsycheNFTV2__getPerkInfoResultValue0Struct extends ethereum.Tuple {
  get title(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get cid(): string {
    return this[2].toString();
  }

  get price(): BigInt {
    return this[3].toBigInt();
  }

  get forSale(): boolean {
    return this[4].toBoolean();
  }

  get prerequisitePerkId(): BigInt {
    return this[5].toBigInt();
  }

  get isPrivate(): boolean {
    return this[6].toBoolean();
  }

  get isLocked(): boolean {
    return this[7].toBoolean();
  }

  get isActivable(): boolean {
    return this[8].toBoolean();
  }

  get isRepurchaseable(): boolean {
    return this[9].toBoolean();
  }
}

export class NousPsycheNFTV2__perksResult {
  value0: string;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: boolean;
  value5: BigInt;
  value6: boolean;
  value7: boolean;
  value8: boolean;
  value9: boolean;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: boolean,
    value5: BigInt,
    value6: boolean,
    value7: boolean,
    value8: boolean,
    value9: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getTitle(): string {
    return this.value0;
  }

  getDescription(): string {
    return this.value1;
  }

  getCid(): string {
    return this.value2;
  }

  getPrice(): BigInt {
    return this.value3;
  }

  getForSale(): boolean {
    return this.value4;
  }

  getPrerequisitePerkId(): BigInt {
    return this.value5;
  }

  getIsPrivate(): boolean {
    return this.value6;
  }

  getIsLocked(): boolean {
    return this.value7;
  }

  getIsActivable(): boolean {
    return this.value8;
  }

  getIsRepurchaseable(): boolean {
    return this.value9;
  }
}

export class NousPsycheNFTV2__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class NousPsycheNFTV2 extends ethereum.SmartContract {
  static bind(address: Address): NousPsycheNFTV2 {
    return new NousPsycheNFTV2("NousPsycheNFTV2", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MERKLEPROOF_ROLE(): Bytes {
    let result = super.call(
      "MERKLEPROOF_ROLE",
      "MERKLEPROOF_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MERKLEPROOF_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MERKLEPROOF_ROLE",
      "MERKLEPROOF_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MINTER_ROLE", "MINTER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERK_CREATOR_ROLE(): Bytes {
    let result = super.call(
      "PERK_CREATOR_ROLE",
      "PERK_CREATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERK_CREATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERK_CREATOR_ROLE",
      "PERK_CREATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseTokenURI(): string {
    let result = super.call("baseTokenURI", "baseTokenURI():(string)", []);

    return result[0].toString();
  }

  try_baseTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseTokenURI", "baseTokenURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPerkInfo(perkId: BigInt): NousPsycheNFTV2__getPerkInfoResultValue0Struct {
    let result = super.call(
      "getPerkInfo",
      "getPerkInfo(uint256):((string,string,string,uint256,bool,uint256,bool,bool,bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(perkId)]
    );

    return changetype<NousPsycheNFTV2__getPerkInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPerkInfo(
    perkId: BigInt
  ): ethereum.CallResult<NousPsycheNFTV2__getPerkInfoResultValue0Struct> {
    let result = super.tryCall(
      "getPerkInfo",
      "getPerkInfo(uint256):((string,string,string,uint256,bool,uint256,bool,bool,bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(perkId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NousPsycheNFTV2__getPerkInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasMinted(_address: Address): boolean {
    let result = super.call("hasMinted", "hasMinted(address):(bool)", [
      ethereum.Value.fromAddress(_address)
    ]);

    return result[0].toBoolean();
  }

  try_hasMinted(_address: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasMinted", "hasMinted(address):(bool)", [
      ethereum.Value.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasPerk(tokenId: BigInt, perkId: BigInt): boolean {
    let result = super.call("hasPerk", "hasPerk(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(perkId)
    ]);

    return result[0].toBoolean();
  }

  try_hasPerk(tokenId: BigInt, perkId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasPerk", "hasPerk(uint256,uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
      ethereum.Value.fromUnsignedBigInt(perkId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelistedForPerk(
    tokenId: BigInt,
    perkId: BigInt,
    userAddress: Address,
    merkleProof: Array<Bytes>
  ): boolean {
    let result = super.call(
      "isWhitelistedForPerk",
      "isWhitelistedForPerk(uint256,uint256,address,bytes32[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(perkId),
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );

    return result[0].toBoolean();
  }

  try_isWhitelistedForPerk(
    tokenId: BigInt,
    perkId: BigInt,
    userAddress: Address,
    merkleProof: Array<Bytes>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWhitelistedForPerk",
      "isWhitelistedForPerk(uint256,uint256,address,bytes32[]):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(perkId),
        ethereum.Value.fromAddress(userAddress),
        ethereum.Value.fromFixedBytesArray(merkleProof)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxTokens(): BigInt {
    let result = super.call("maxTokens", "maxTokens():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxTokens", "maxTokens():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintPrice(): BigInt {
    let result = super.call("mintPrice", "mintPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintPrice", "mintPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextPerkId(): BigInt {
    let result = super.call("nextPerkId", "nextPerkId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextPerkId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextPerkId", "nextPerkId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextTokenId(): BigInt {
    let result = super.call("nextTokenId", "nextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextTokenId", "nextTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownedPerks(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "ownedPerks",
      "ownedPerks(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_ownedPerks(param0: BigInt, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ownedPerks",
      "ownedPerks(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  perkMerkleRoot(param0: BigInt): Bytes {
    let result = super.call(
      "perkMerkleRoot",
      "perkMerkleRoot(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_perkMerkleRoot(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "perkMerkleRoot",
      "perkMerkleRoot(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  perks(param0: BigInt): NousPsycheNFTV2__perksResult {
    let result = super.call(
      "perks",
      "perks(uint256):(string,string,string,uint256,bool,uint256,bool,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new NousPsycheNFTV2__perksResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBoolean(),
      result[8].toBoolean(),
      result[9].toBoolean()
    );
  }

  try_perks(param0: BigInt): ethereum.CallResult<NousPsycheNFTV2__perksResult> {
    let result = super.tryCall(
      "perks",
      "perks(uint256):(string,string,string,uint256,bool,uint256,bool,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NousPsycheNFTV2__perksResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBoolean(),
        value[8].toBoolean(),
        value[9].toBoolean()
      )
    );
  }

  royaltyAddress(): Address {
    let result = super.call("royaltyAddress", "royaltyAddress():(address)", []);

    return result[0].toAddress();
  }

  try_royaltyAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "royaltyAddress",
      "royaltyAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyBps(): BigInt {
    let result = super.call("royaltyBps", "royaltyBps():(uint96)", []);

    return result[0].toBigInt();
  }

  try_royaltyBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("royaltyBps", "royaltyBps():(uint96)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): NousPsycheNFTV2__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );

    return new NousPsycheNFTV2__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): ethereum.CallResult<NousPsycheNFTV2__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NousPsycheNFTV2__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _mintPrice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maxTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddPerkCall extends ethereum.Call {
  get inputs(): AddPerkCall__Inputs {
    return new AddPerkCall__Inputs(this);
  }

  get outputs(): AddPerkCall__Outputs {
    return new AddPerkCall__Outputs(this);
  }
}

export class AddPerkCall__Inputs {
  _call: AddPerkCall;

  constructor(call: AddPerkCall) {
    this._call = call;
  }

  get title(): string {
    return this._call.inputValues[0].value.toString();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get cid(): string {
    return this._call.inputValues[2].value.toString();
  }

  get price(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get prerequisitePerkId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get isPrivate(): boolean {
    return this._call.inputValues[5].value.toBoolean();
  }

  get isActivable(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get isRepurchaseable(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }
}

export class AddPerkCall__Outputs {
  _call: AddPerkCall;

  constructor(call: AddPerkCall) {
    this._call = call;
  }
}

export class AddWhitelistMerkleCall extends ethereum.Call {
  get inputs(): AddWhitelistMerkleCall__Inputs {
    return new AddWhitelistMerkleCall__Inputs(this);
  }

  get outputs(): AddWhitelistMerkleCall__Outputs {
    return new AddWhitelistMerkleCall__Outputs(this);
  }
}

export class AddWhitelistMerkleCall__Inputs {
  _call: AddWhitelistMerkleCall;

  constructor(call: AddWhitelistMerkleCall) {
    this._call = call;
  }

  get perkId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class AddWhitelistMerkleCall__Outputs {
  _call: AddWhitelistMerkleCall;

  constructor(call: AddWhitelistMerkleCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class EquipCall extends ethereum.Call {
  get inputs(): EquipCall__Inputs {
    return new EquipCall__Inputs(this);
  }

  get outputs(): EquipCall__Outputs {
    return new EquipCall__Outputs(this);
  }
}

export class EquipCall__Inputs {
  _call: EquipCall;

  constructor(call: EquipCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get perkId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EquipCall__Outputs {
  _call: EquipCall;

  constructor(call: EquipCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PurchasePerkCall extends ethereum.Call {
  get inputs(): PurchasePerkCall__Inputs {
    return new PurchasePerkCall__Inputs(this);
  }

  get outputs(): PurchasePerkCall__Outputs {
    return new PurchasePerkCall__Outputs(this);
  }
}

export class PurchasePerkCall__Inputs {
  _call: PurchasePerkCall;

  constructor(call: PurchasePerkCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get perkId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class PurchasePerkCall__Outputs {
  _call: PurchasePerkCall;

  constructor(call: PurchasePerkCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetDefaultRoyaltyCall extends ethereum.Call {
  get inputs(): SetDefaultRoyaltyCall__Inputs {
    return new SetDefaultRoyaltyCall__Inputs(this);
  }

  get outputs(): SetDefaultRoyaltyCall__Outputs {
    return new SetDefaultRoyaltyCall__Outputs(this);
  }
}

export class SetDefaultRoyaltyCall__Inputs {
  _call: SetDefaultRoyaltyCall;

  constructor(call: SetDefaultRoyaltyCall) {
    this._call = call;
  }

  get _receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _feeNumerator(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDefaultRoyaltyCall__Outputs {
  _call: SetDefaultRoyaltyCall;

  constructor(call: SetDefaultRoyaltyCall) {
    this._call = call;
  }
}

export class TogglePerkSaleCall extends ethereum.Call {
  get inputs(): TogglePerkSaleCall__Inputs {
    return new TogglePerkSaleCall__Inputs(this);
  }

  get outputs(): TogglePerkSaleCall__Outputs {
    return new TogglePerkSaleCall__Outputs(this);
  }
}

export class TogglePerkSaleCall__Inputs {
  _call: TogglePerkSaleCall;

  constructor(call: TogglePerkSaleCall) {
    this._call = call;
  }

  get perkId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TogglePerkSaleCall__Outputs {
  _call: TogglePerkSaleCall;

  constructor(call: TogglePerkSaleCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdatePerkCall extends ethereum.Call {
  get inputs(): UpdatePerkCall__Inputs {
    return new UpdatePerkCall__Inputs(this);
  }

  get outputs(): UpdatePerkCall__Outputs {
    return new UpdatePerkCall__Outputs(this);
  }
}

export class UpdatePerkCall__Inputs {
  _call: UpdatePerkCall;

  constructor(call: UpdatePerkCall) {
    this._call = call;
  }

  get perkId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get title(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get cid(): string {
    return this._call.inputValues[3].value.toString();
  }

  get price(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get prerequisitePerkId(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get isPrivate(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get isActivable(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get isRepurchaseable(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }
}

export class UpdatePerkCall__Outputs {
  _call: UpdatePerkCall;

  constructor(call: UpdatePerkCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}
